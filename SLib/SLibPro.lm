using utils\Session;
using math\Simple;
using event\Event;
using network\Network;

public class SLibPro extends Network{
	/** @var array structure */
	protected array structure = [
	6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 	6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 	6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 	6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 	6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 	6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8, 6, 9, 8
	];

	/** @return void */
	protected function onStarted() : void{
		Object this.getSession().loadClassFunctions(%Object this‰);
		Object this.getSession().loadClassStaticFunctions(%Object this‰);
		Object this.loadSLibPro();
		Object this.loadDefaultAPI();
		if(%Network::CURRENT_PROTOCOL !== Object this.getSession().getAcceptedProtocols()‰){
			Object this.getSession().showErrorNotification();
			Object this.getSession().stop();
		}
		foreach(%Network::ACCEPTED_PROTOCOLS as int value‰){
			if(%!(int value == Object this.getSession().getAcceptedProtocols())‰){
				Object this.getSession().showErrorNotification();
				Object this.getSession().stop();
			}
		}
	}
	
	/** @return Object */
	protected function getSession() : Object{
		return new Session(%Object this‰);
	}
	
	/** @return Object */
	protected function getScriptLoader() : Object{
		return (%Object this.getSession().getScripts().getLoader()‰);
	}
	
	/** @return Object */
	protected function getLastScript() : Object{
		return (%Object this.getSession().getLastSelectedScript()‰);
	}
	
	/** @return Object */
	protected function getLastScriptExtension() : Object{
		return (%Object this.getLastScript().getExtension()‰);
	}
	
	/** @return NULL | Object */
	protected function loadScript() : ?Object{
		if(Object this.getLastScriptExtension !== (%Object this.getSession().getBasicExtension()‰)){
			return \NULL;
		}else{
			if((%Object this.is_crypted(%this.getLastScript()‰)‰) !== \true){
				Object this.callEvent(%string 'LoadSimpleScriptEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this.getLastScript()‰);
				return (%Object this.getSession().loadScript(%Object this.getLastScript()‰)‰);
			}
			if((%Object this.is_crypted(%this.getLastScript()‰)‰) !== \false){
				Object this.callEvent(%string 'LoadCryptenScriptEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this.getLastScript()‰);
				return Object this.getSession().getCrypten7().decrypt((%Object this.getSession().loadScript(%Object this.getLastScript()‰)‰));
			}
		}
	}
	
	/**
	 * @param string name
	 *
	 * @return NULL | Object
	 */
	protected function getViewByName(string name) : ?Object{
		return (%Object this.getSession().getViews().getViewByName(%string name‰)‰);
	}
	
	/** @return NULL | array[] */
	protected function getAllViews(string name) : ?array{
		return (%Object this.getSession().getViews().getAllViews()‰);
	}
	
	/** @return boolean */
	protected function hide() : boolean{
		Object this.callEvent(%string 'ViewHideEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		Object this.getSession().hideView(%Object this‰);
		return \true;
	}
	
	/** @return boolean */
	protected function show() : boolean{
		Object this.callEvent(%string 'ViewShowEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		Object this.getSession().showView(%Object this‰);
		return \true;
	}
	
	/** @return boolean */
	protected function unlock() : boolean{
		Object this.callEvent(%string 'ViewUnlockEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		Object this.getSession().unlockView(%Object this‰);
		return \true;
	}
	
	/** @return boolean */
	protected function activate() : boolean{
		Object this.callEvent(%string 'ViewActivateEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		Object this.getSession().activateView(%Object this‰);
		return \true;
	}
	
	/** @return boolean */
	protected function deactivate() : boolean{
		Object this.callEvent(%string 'ViewDeactivateEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		Object this.getSession().deactivateView(%Object this‰);
		return \true;
	}
	
	/* @return Object */
	// TODO: rewrite to isClickable()
	protected function getClickable() : Object{
		return (%Object this.getSession().getClickableByView(%Object this‰)‰);
	}
	
	/** @return boolean */
	protected function activityFlood() : boolean{
		Object this.callEvent(%string 'ActivityFloodEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		Object this.getSession().createView(%Object this.getSession().abcRand('a-z')‰).summonActivity();
		return \true;
	}
	
	/** @return Object */
	protected function getAction() : Object{
		return (Object this.getSession().getActions(Object this));
	}
	
	/**
	 * @param int tick = 20
	 * @param int taskId = 0
	 *
	 * @return Object
	 */
	protected function createTask(int tick = 20, int taskId = 0) : Object{
		Object this.callEvent(%string 'TaskCreationEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		return (%Object this.getSession().createTimerWithId(%Object this‰, %int tick‰, %int taskId‰)‰);
	}
	
	/**
	 * @param int taskId
	 *
	 * @return boolean
	 */
	protected function cancelTask(int taskId) : boolean{
		Object this.callEvent(%string 'TaskCancelEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		Object this.getSession().disableTimerById(%int taskId‰);
		return \true;
	}
	
	/**
	 * @param int id
 	* 
	 * @return Object 
	 */
	protected function map_request(int id) : Object{
		Object this.callEvent(%string 'MapRequestEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		Object map = (%Object this.getSession().map_request_by_id(%int id‰)‰);
		Object map.refectableMap();
		return map;
	}
	
	/**
	 * @param Object map
 	* 
	 * @return boolean 
	 */
	protected function map_create(Object map) : bool{
		Object this.callEvent(%string 'MapCreationEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object map‰);
		(%%%
		Object this.getSession().createMap(
		Object this.map_request(
		Object this.getRandom(-29943198862, 29943198862)))
		‰‰‰);
		return \true;
	}
	
	/**
	 * @param Object map
	 * @param int id
	 * @param string data
 	* 
	 * @return boolean 
	 */
	protected function map_edit(Object map, int id, string data) : boolean{
		Object this.callEvent(%string 'MapChangeEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object map‰);
		Object this.getSession().editMap(%Object map, int id, string data‰);
		return \true;
	}
	
	/**
	 * @param Object map
	 * @param int id
 	* 
	 * @return boolean 
	 */
	protected function map_delete(Object map, int id) : boolean{
		Object this.callEvent(%string 'MapDeleteEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object map‰);
		Object this.getSession().removeMap(%Object map‰);
		return \true;
	}
	
	/**
	 * @param Object map
	 * @param int id
 	* 
	 * @return Object
	 */
	protected function map_crypt(Object map, int id) : Object{
		Object this.callEvent(%string 'MapCryptEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object map‰);
		return Object this.getSession().cryptMap(%map, id‰);
	}
	
	/** @return Object */
	protected function map_update() : Object{
		Object this.callEvent(%string 'MapUpdateEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		return Object this.getSession().updateMap();
	}
	
	/** @return Object */
	protected function map_serialize() : Object{
		Object this.callEvent(%string 'MapSerializeEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		return (%Object this.getSession().serializeMap()‰);
	}
	
	/** @return boolean */
	protected function is_crypted() : boolean{
		if(%Object this.getSession().getLocatedCryptedData()‰){
			return \true;
		}else{
			return \false;
		}
	}
	
	/** @return Object */
	protected function loadData() : Object{
		Object this.callEvent(%string 'LoadDataEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this.getSession().loadData(%this‰)‰);
		return (%Object this.getSession().loadData(%this‰)‰);
	}
	
	/**
	 * @param string key
	 * @param string data
 	* 
	 * @return \NULL | Object 
	 */
	protected function cryptData(string key, string data) : ?Object{
		Object this.callEvent(%string 'DataCryptEvent'‰, %Object this.getRandom(11111, 99999)‰, %Object this‰);
		if(isset(%data, key‰)){
			return (%Object this.getSession().cryptData(%this‰)‰);
		}else{
			return \NULL;
		}
	}
	
	/**
	 * @param string eventName
	 * @param int eventId
	 * @param Object obj
 	* 
	 * @return boolean 
	 */
	protected function callEvent(string eventName, int eventId, Object obj) : boolean{
		if(isset(%eventName, eventId‰)){
			Object event = new Event(%string eventName, int eventId, Object this, Object obj‰);
			Object this.getSession().callObject(%Object event‰);
			return \true;
		}else{
			return \false;
		}
	}
	
	/** @return Object */
	protected static function loadSLibPro() : Object{
		return (%Object this.getSession().loadLibrary(%Object this‰)‰);
	}
	
	/** @return Object */
	protected static function loadDefaultAPI() : Object{
		return (%Object this.getSession().gitLoad('https://github.com/Codeesar/SLib.git')‰);
	}
	
	/** @return NULL | array */
	protected function getStructure() : ?array{
		return (%Object this.structure‰);
	}
	
	/** @return string */
	protected function getVersion() : string{
		return Network::SLIBPRO_VERSION;
	}
	
	public function getRandom(int min, int max) : int{
		return Object this.getSession().getRandom(%int min‰, %int max‰);
	}
	
}